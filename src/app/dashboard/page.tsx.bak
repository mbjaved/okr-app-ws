'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertCircle, CheckCircle2, Clock, Loader2, RefreshCw } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';

// Define types for our dashboard data
interface OkrStats {
  total: number;
  onTrack: number;
  atRisk: number;
  offTrack: number;
  completed: number;
}

interface DashboardData {
  okrStats: OkrStats;
  upcomingDeadlines: any[];
  recentActivity: any[];
  teamOkrStatus?: OkrStats;
  user: {
    name: string;
    role: string;
    department: string;
  };
}

// Extend the session type to include our custom properties
declare module 'next-auth' {
  interface Session {
    user: {
      id: string;
      name?: string | null;
      email?: string | null;
      image?: string | null;
      role: string;
      department: string;
      _id?: string;
      avatarUrl?: string;
    };
  }
}

// Dashboard data will be fetched from the API

// Helper Components
interface StatCardProps {
  title: string;
  value: number | string;
  icon: React.ReactNode;
  description: string;
  variant?: 'default' | 'success' | 'warning' | 'danger' | 'info' | 'completed';
}

const StatCard = ({ title, value, icon, description, variant = 'default' }: StatCardProps) => {
  const variantClasses = {
    default: 'bg-muted/50',
    success: 'bg-green-50 dark:bg-green-900/20',
    warning: 'bg-yellow-50 dark:bg-yellow-900/20',
    danger: 'bg-red-50 dark:bg-red-900/20',
    info: 'bg-blue-50 dark:bg-blue-900/20',
    completed: 'bg-purple-50 dark:bg-purple-900/20',
  };

  return (
    <Card className={cn(variantClasses[variant], 'transition-colors')}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
        <CardTitle className="text-sm font-medium text-muted-foreground">
          {title}
        </CardTitle>
        <div className="h-4 w-4 text-muted-foreground">
          {icon}
        </div>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        <p className="text-xs text-muted-foreground">{description}</p>
      </CardContent>
    </Card>
  );
};

interface StatItemProps {
  label: string;
  value: number;
  total: number;
  variant: 'success' | 'warning' | 'danger' | 'completed';
}

const StatItem = ({ label, value, total, variant }: StatItemProps) => {
  const percentage = total > 0 ? Math.round((value / total) * 100) : 0;
  const variantClasses = {
    success: 'bg-green-500',
    warning: 'bg-yellow-500',
    danger: 'bg-red-500',
    completed: 'bg-purple-500',
  };

  return (
    <div className="space-y-1">
      <div className="flex justify-between text-sm">
        <span className="text-muted-foreground">{label}</span>
        <span className="font-medium">
          {value} <span className="text-muted-foreground">/ {total}</span>
        </span>
      </div>
      <Progress value={percentage} className={`h-2 ${variantClasses[variant]}`} />
    </div>
  );
};

const DashboardSkeleton = () => (
  <div className="space-y-6">
    {/* Header Skeleton */}
    <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
      <div className="space-y-2">
        <Skeleton className="h-9 w-64" />
        <Skeleton className="h-4 w-80" />
      </div>
      <Skeleton className="h-10 w-32 rounded-md" />
    </div>

    {/* Stats Grid Skeleton */}
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      {[...Array(4)].map((_, i) => (
        <Card key={i} className="border-border/40">
          <CardHeader className="pb-2">
            <Skeleton className="h-4 w-24" />
          </CardHeader>
          <CardContent className="space-y-2">
            <Skeleton className="h-8 w-16 mb-2" />
            <Skeleton className="h-2 w-full" />
          </CardContent>
        </Card>
      ))}
    </div>
  </div>
);

// Main Dashboard Component
export default function DashboardPage() {
  const { data: session, status } = useSession({
    required: true,
    onUnauthenticated() {
      // Redirect to login if not authenticated
      window.location.href = '/login';
    },
  });

  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isRefreshing, setIsRefreshing] = useState(false);

  const fetchDashboardData = useCallback(async () => {
    if (!session) {
      console.log('No session available, skipping data fetch');
      return;
    }
    
    try {
      setError(null);
      if (!isRefreshing) setLoading(true);
      
      console.log('Fetching dashboard data...');
      const response = await fetch('/api/dashboard', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          // Ensure credentials are included for cross-origin requests
          ...(process.env.NODE_ENV === 'production' && { 'credentials': 'include' })
        },
      });
      
      const responseData = await response.json().catch(() => ({}));
      
      if (!response.ok) {
        console.error('Dashboard API error:', {
          status: response.status,
          statusText: response.statusText,
          error: responseData.error || 'No error details provided'
        });
        throw new Error(responseData.error || `Failed to fetch dashboard data: ${response.status} ${response.statusText}`);
      }
      
      console.log('Dashboard data received:', responseData);
      
      // Ensure we have the expected data structure
      if (!responseData.okrStats) {
        console.warn('Unexpected dashboard data structure:', responseData);
        throw new Error('Invalid dashboard data format received');
      }
      
      setDashboardData({
        okrStats: responseData.okrStats || { total: 0, onTrack: 0, atRisk: 0, offTrack: 0, completed: 0 },
        upcomingDeadlines: responseData.upcomingDeadlines || [],
        recentActivity: responseData.recentActivity || [],
        teamOkrStatus: responseData.teamOkrStatus,
        user: responseData.user || { name: 'User', role: 'user', department: 'General' }
      });
      
      if (isRefreshing) {
        toast.success('Dashboard updated');
      }
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to load dashboard data';
      setError(errorMessage);
      toast.error(errorMessage);
      
      // If unauthorized, redirect to login
      if (errorMessage.includes('401') || errorMessage.includes('Not authenticated')) {
        console.log('Redirecting to login due to authentication error');
        window.location.href = '/login';
      }
    } finally {
      setLoading(false);
      setIsRefreshing(false);
    }
  }, [isRefreshing, session]);

  useEffect(() => {
    if (session) {
      // Only fetch data if we have a valid session
      fetchDashboardData();
    }
    // The onUnauthenticated callback will handle the redirect
    // No need to handle other states as useSession is set to required
  }, [session, fetchDashboardData]);

  const handleRefresh = () => {
    setIsRefreshing(true);
    fetchDashboardData();
  };

  const renderOkrStats = (stats: OkrStats, title: string, isTeamStats = false) => (
    <Card className="w-full">
      <CardHeader className="pb-2">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm font-medium">{title}</CardTitle>
          {isTeamStats && <Users className="h-4 w-4 text-muted-foreground" />}
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-2">
          <div className="grid grid-cols-2 gap-2">
            <StatItem 
              label="On Track" 
              value={stats.onTrack} 
              total={stats.total}
              variant="success"
            />
            <StatItem 
              label="At Risk" 
              value={stats.atRisk} 
              total={stats.total}
              variant="warning"
            />
            <StatItem 
              label="Off Track" 
              value={stats.offTrack} 
              total={stats.total}
              variant="danger"
            />
            <StatItem 
              label="Completed" 
              value={stats.completed} 
              total={stats.total}
              variant="completed"
            />
          </div>
        </div>
      </CardContent>
    </Card>
  );

  // Loading state
  if (loading) {
    return (
      <div className="container mx-auto p-6 space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <Skeleton className="h-8 w-48 mb-2" />
            <Skeleton className="h-4 w-64" />
          </div>
          <Skeleton className="h-10 w-24" />
        </div>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          {[1, 2, 3, 4].map((i) => (
            <Skeleton key={i} className="h-32 rounded-xl" />
          ))}
        </div>
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-7">
          <Skeleton className="col-span-4 h-80" />
          <Skeleton className="col-span-3 h-80" />
        </div>
      </div>
    );
  }

  // Handle unauthenticated state (this is a fallback, should be handled by onUnauthenticated)
  if (!session) {
    return (
      <div className="container mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle>Authentication Required</CardTitle>
            <CardDescription>Please sign in to access the dashboard. Redirecting...</CardDescription>
          </CardHeader>
          <CardFooter>
            <Button asChild>
              <Link href="/login">Go to Login</Link>
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  // Handle error state
  if (error) {
    return (
      <div className="container mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle>Error Loading Dashboard</CardTitle>
            <CardDescription className="space-y-4">
              <p>{error}</p>
              <div className="p-4 bg-muted rounded-md">
                <p className="text-sm font-mono">
                  {JSON.stringify({
                    status: 'error',
                    message: error,
                    timestamp: new Date().toISOString()
                  }, null, 2)}
                </p>
              </div>
            </CardDescription>
          </CardHeader>
          <CardFooter className="space-x-4">
            <Button 
              onClick={handleRefresh} 
              disabled={isRefreshing}
              className="flex items-center gap-2"
            >
              {isRefreshing ? (
                <>
                  <Loader2 className="h-4 w-4 animate-spin" />
                  Refreshing...
                </>
              ) : 'Try Again'}
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }
          </CardFooter>
          </CardContent>
        </Card>
      </div>
    );
  }

  // No data state
  if (!dashboardData) {
    return (
      <div className="container mx-auto p-6">
        <Card>
          <CardHeader>
            <CardTitle>No Data Available</CardTitle>
            <CardDescription>
              {loading ? 'Loading dashboard data...' : 'Unable to load dashboard data.'}
            </CardDescription>
          </CardHeader>
          <CardFooter>
            <Button 
              onClick={handleRefresh} 
              disabled={isRefreshing || loading}
              className="gap-2"
            >
              {isRefreshing || loading ? (
                <>
                  <RefreshCw className="h-4 w-4 animate-spin" />
                  {loading ? 'Loading...' : 'Refreshing...'}
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4" />
                  Try Again
                </>
              )}
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  const { okrStats, upcomingDeadlines, recentActivity, teamOkrStatus, user } = dashboardData;
  const isManager = user.role === 'manager' || user.role === 'admin';

  return (
    <div className="container mx-auto p-4 md:p-6 space-y-6">
      {/* Welcome Header */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">
            Welcome back, {user.name}!
          </h1>
          <p className="text-muted-foreground">
            Here's what's happening with your OKRs today.
          </p>
        </div>
        <Button 
          variant="outline" 
          onClick={handleRefresh}
          disabled={isRefreshing}
          className="gap-2"
        >
          {isRefreshing ? (
            <RefreshCw className="h-4 w-4 animate-spin" />
          ) : (
            <RefreshCw className="h-4 w-4" />
          )}
          {isRefreshing ? 'Refreshing...' : 'Refresh'}
        </Button>
      </div>

      {/* Stats Grid */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatCard
          title="Total OKRs"
          value={okrStats.total}
          icon={<CheckCircle className="h-4 w-4" />}
          description="Your total objectives"
          variant="default"
        />
        <StatCard
          title="On Track"
          value={okrStats.onTrack}
          icon={<CheckCircle className="h-4 w-4 text-green-500" />}
          description="Objectives on track"
          variant="success"
        />
        <StatCard
          title="At Risk"
          value={okrStats.atRisk}
          icon={<AlertTriangle className="h-4 w-4 text-yellow-500" />}
          description="Needs attention"
          variant="warning"
        />
        <StatCard
          title="Completed"
          value={okrStats.completed}
          icon={<CheckCircle className="h-4 w-4 text-purple-500" />}
          description="Objectives completed"
          variant="completed"
        />
      </div>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {/* OKR Progress */}
        <div className="space-y-4 md:col-span-1 lg:col-span-2">
          <h2 className="text-lg font-semibold">Your OKR Progress</h2>
          {renderOkrStats(okrStats, 'My OKRs')}
          
          {isManager && teamOkrStatus && (
            <>
              <h2 className="text-lg font-semibold mt-6">Team OKR Status</h2>
              {renderOkrStats(teamOkrStatus, 'Team OKRs', true)}
            </>
          )}
        </div>

        {/* Upcoming Deadlines */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-semibold">Upcoming Deadlines</h2>
            <Link href="/okrs" className="text-sm font-medium text-primary hover:underline">
              View All
            </Link>
          </div>
          <Card>
            <CardContent className="p-6 space-y-4">
              {upcomingDeadlines.length > 0 ? (
                upcomingDeadlines.map((deadline) => (
                  <div key={deadline._id} className="space-y-2">
                    <div className="flex items-center justify-between">
                      <h3 className="font-medium">{deadline.objective}</h3>
                      <span className="text-xs text-muted-foreground">
                        {new Date(deadline.dueDate).toLocaleDateString()}
                      </span>
                    </div>
                    <div className="space-y-1">
                      {deadline.keyResults.map((kr, i) => (
                        <div key={i} className="space-y-1">
                          <div className="flex justify-between text-sm">
                            <span className="text-muted-foreground">{kr.title}</span>
                            <span className="font-medium">{kr.progress}%</span>
                          </div>
                          <Progress value={kr.progress} className="h-2" />
                        </div>
                      ))}
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-4 text-muted-foreground">
                  No upcoming deadlines
                </div>
              )}
            </CardContent>
          </Card>

          {/* Recent Activity */}
          <h2 className="text-lg font-semibold mt-6">Recent Activity</h2>
          <Card>
            <CardContent className="p-6 space-y-4">
              {recentActivity.length > 0 ? (
                recentActivity.map((activity) => (
                  <div key={activity._id} className="flex items-start gap-3">
                    <div className="h-8 w-8 rounded-full bg-muted flex items-center justify-center">
                      {activity.user.avatarUrl ? (
                        <img 
                          src={activity.user.avatarUrl} 
                          alt={activity.user.name}
                          className="h-full w-full rounded-full"
                        />
                      ) : (
                        <span className="text-xs">
                          {activity.user.name
                            .split(' ')
                            .map((n: string) => n[0])
                            .join('')}
                        </span>
                      )}
                    </div>
                    <div className="flex-1">
                      <p className="text-sm">
                        <span className="font-medium">{activity.user.name}</span>{' '}
                        {activity.description}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        {new Date(activity.timestamp).toLocaleString()}
                      </p>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-4 text-muted-foreground">
                  No recent activity
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
